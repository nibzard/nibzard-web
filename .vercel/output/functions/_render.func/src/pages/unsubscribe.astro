---
import { server } from '../actions';
import BaseLayout from '../layouts/BaseLayout.astro'; // Adjust layout import as needed

let emailFromQuery = Astro.url.searchParams.get('email');
let formMessage: string | null = null;
let formMessageType: 'success' | 'error' | null = null;
let initialEmail = emailFromQuery || '';
let isPost = Astro.request.method === "POST";

// If email is in query param, try to unsubscribe automatically on load (via a hidden form submission)
// This is a conceptual client-side enhancement; Astro actions are server-side.
// For a true auto-unsubscribe on load, the action would need to be called server-side if email is present.

if (isPost) {
  const formData = await Astro.request.formData();
  const result = await server.unsubscribe(formData);

  if (result && result.data?.success) {
    formMessage = "You have been successfully unsubscribed.";
    formMessageType = 'success';
  } else if (result && result.error) {
    formMessage = result.error.message || "An error occurred. Please try again.";
    formMessageType = 'error';
  } else {
    formMessage = "An unexpected issue occurred. Please try again.";
    formMessageType = 'error';
  }
  // Keep the email in the field after submission attempt
  initialEmail = formData.get("email")?.toString() || initialEmail;
}

const pageTitle = "Unsubscribe from Newsletter";
const pageDescription = "Manage your subscription preferences.";
---
<BaseLayout title={pageTitle} description={pageDescription}>
  <style>
    .unsubscribe-container {
      max-width: 600px;
      margin: 2rem auto;
      padding: 2rem;
      background-color: var(--color-form);
      border: 1px solid var(--color-border);
      border-radius: var(--border-radius);
    }
    .unsubscribe-container h1 {
      margin-top: 0;
      margin-bottom: var(--space-md);
    }
    .unsubscribe-form {
      display: flex;
      flex-direction: column;
      gap: var(--space-md);
    }
    .unsubscribe-input {
      padding: var(--space-sm);
      border: 1px solid var(--color-border);
      border-radius: var(--border-radius);
      font-size: 1rem;
    }
    .unsubscribe-button {
      background-color: var(--color-accent2);
      color: white;
      border: none;
      padding: var(--space-sm) var(--space-md);
      border-radius: var(--border-radius);
      cursor: pointer;
      font-weight: 500;
    }
    .form-message {
      padding: var(--space-sm);
      border-radius: var(--border-radius);
      margin-bottom: var(--space-md);
      text-align: center;
    }
    .form-message.success {
      background-color: var(--color-success-bg);
      color: var(--color-success-text);
      border: 1px solid var(--color-success-border);
    }
    .form-message.error {
      background-color: var(--color-danger-bg);
      color: var(--color-danger-text);
      border: 1px solid var(--color-danger-border);
    }
  </style>

  <div class="unsubscribe-container">
    <h1>{pageTitle}</h1>

    {emailFromQuery && !isPost && (
      <>
        <p>Attempting to unsubscribe {emailFromQuery}...</p>
        <form method="POST" id="autoUnsubscribeForm">
          <input type="hidden" name="email" value={emailFromQuery} />
        </form>
        <script is:inline>
          // Automatically submit the form if email is from query param
          // This is a client-side script to trigger the POST request for the action
          document.addEventListener('DOMContentLoaded', () => {
            const autoForm = document.getElementById('autoUnsubscribeForm');
            if (autoForm) {
              // Small delay to ensure page content is visible before potential navigation
              setTimeout(() => {
                autoForm.requestSubmit ? autoForm.requestSubmit() : autoForm.submit();
              }, 100);
            }
          });
        </script>
      </>
    )}

    {formMessage && (
      <div class={`form-message ${formMessageType}`}>
        {formMessage}
      </div>
    )}

    <form class="unsubscribe-form" method="POST">
      <p>If you wish to unsubscribe, please enter your email address below and click "Unsubscribe".</p>
      <div>
        <label for="email">Email Address:</label>
        <input type="email" id="email" name="email" class="unsubscribe-input" value={initialEmail} required />
      </div>
      <button type="submit" class="unsubscribe-button">Unsubscribe</button>
    </form>

    <p style="margin-top: 1rem; text-align: center;">
      <a href="/">Go back to homepage</a>
    </p>
  </div>
</BaseLayout>