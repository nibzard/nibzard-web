---
// Import our main CSS file which includes all styles
import '../styles/global.css';
// Import critical CSS for inlining
import criticalCSS from '../styles/critical.css?inline';
import { SEO } from "astro-seo";

import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import SchemaMarkup from '../components/SchemaMarkup.astro';
import SearchOverlay from '../components/SearchOverlay.jsx';
import { createWebsiteSchema, createPersonSchema } from '../utils/schemaUtils';

export interface Props {
  title?: string;
  description?: string;
  ogImage?: string;
}

const {
  title = "nibzard",
  description = "all things AI agents, growth and startups",
  ogImage
} = Astro.props;
const canonicalUrl = Astro.url.toString();
const siteUrl = Astro.site ? Astro.site.toString() : Astro.url.origin;
const defaultOgImage = new URL("/og-nibzard.jpeg", siteUrl).toString();

// Generate schema markup
const websiteSchema = createWebsiteSchema();
const personSchema = createPersonSchema();
---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!-- Comprehensive author meta tags -->
  <meta name="author" content="Nikola Balić">
  <meta name="author" content="Nikola Balic">
  <meta name="dc.creator" content="Nikola Balić (Nikola Balic)">
  <meta name="article:author" content="Nikola Balić">
  <meta name="twitter:creator" content="@nibzard">
  <link rel="author" href="https://nibzard.com/bio">
  <link rel="me" href="https://x.com/nibzard">
  <link rel="me" href="https://www.linkedin.com/in/nikolabalic/">
  <link rel="me" href="https://github.com/nibzard">
  <link rel="me" href="https://scholar.google.com/citations?user=JT3JHokAAAAJ&hl=en&oi=ao">
  <link rel="me" href="https://www.researchgate.net/profile/Nikola_Balic">
  <link rel="me" href="https://orcid.org/0000-0002-4405-1470">

  <SEO
    title={title}
    description={description}
    canonical={canonicalUrl}
    openGraph={{
      basic: {
        title: title,
        type: "website",
        image: ogImage || defaultOgImage,
        url: canonicalUrl,
      },
      optional: {
        siteName: "nibzard",
      }
    }}
    twitter={{
      creator: "@nibzard",
      site: "@nibzard",
      card: "summary_large_image",
      title: title,
      description: description,
      image: ogImage || defaultOgImage,
      imageAlt: title
    }}
    extend={{
      // astro-seo handles the title and description meta tags.
      // It can also handle the favicon if you provide it in the link array.
      link: [
        { rel: "icon", type: "image/svg+xml", href: "/favicon.svg" },
        { rel: "sitemap", href: "/sitemap-index.xml" }
      ],
      meta: [
        { name: "viewport", content: "width=device-width, initial-scale=1.0" },
        { name: "charset", content: "UTF-8" }
      ]
    }}
  />

  <!-- Google tag (gtag.js) -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-RK4YPPTGTB"></script>
  <script is:inline>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'G-RK4YPPTGTB');
  </script>

  <!-- Microsoft Clarity -->
  <script is:inline>
    (function(c,l,a,r,i,t,y){
        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};
        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;
        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);
    })(window, document, "clarity", "script", "t6jkgqqx5e");
  </script>

  <!-- DNS prefetch for third-party services -->
  <link rel="dns-prefetch" href="https://www.googletagmanager.com">
  <link rel="dns-prefetch" href="https://www.clarity.ms">

  <!-- Monaspace fonts are loaded from local files via fonts.css -->

  <!-- Monaspace fonts are self-hosted, no external font loading needed -->

  <!-- Critical CSS inlined for faster first paint -->
  <style set:html={criticalCSS}></style>

  <!-- Preload critical Monaspace fonts -->
  <link rel="preload" href="/fonts/monaspace/MonaspaceArgonVF.woff2" as="font" type="font/woff2" crossorigin>
  <link rel="preload" href="/fonts/monaspace/MonaspaceXenonVF.woff2" as="font" type="font/woff2" crossorigin>
  <link rel="preload" href="/fonts/monaspace/MonaspaceNeonVF.woff2" as="font" type="font/woff2" crossorigin>
  <link rel="preload" href="/fonts/monaspace/MonaspaceKryptonVF.woff2" as="font" type="font/woff2" crossorigin>
  <link rel="preload" href="/fonts/monaspace/MonaspaceRadonVF.woff2" as="font" type="font/woff2" crossorigin>

  <!-- Schema.org Structured Data -->
  <SchemaMarkup schema={websiteSchema} />
  <SchemaMarkup schema={personSchema} />

  <!-- Additional head content from child layouts -->
  <slot name="head" />

  <!-- View Transitions -->
  <meta name="view-transition" content="same-origin" />
</head>
<body>
  <Header />
  <main class="content-container">
    <slot /> <!-- Page content will be injected here -->
  </main>
  <Footer />

  <!-- Search Overlay -->
  <SearchOverlay client:idle />

  <!-- Enhanced code blocks with copy functionality -->
  <script is:inline>
    // Enhanced code blocks with copy functionality
    document.addEventListener('DOMContentLoaded', function() {
      const codeBlocks = document.querySelectorAll('pre code');

      codeBlocks.forEach(function(codeBlock) {
        const pre = codeBlock.parentElement;
        if (pre.tagName !== 'PRE') return;

        // Skip if already wrapped
        if (pre.parentElement.classList.contains('code-block-wrapper')) return;

        // Create wrapper
        const wrapper = document.createElement('div');
        wrapper.className = 'code-block-wrapper';

        // Create copy button
        const copyButton = document.createElement('button');
        copyButton.className = 'copy-button';
        copyButton.setAttribute('aria-label', 'Copy code to clipboard');
        copyButton.innerHTML = `
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M8 4V2C8 1.44772 8.44772 1 9 1H19C19.5523 1 20 1.44772 20 2V16C20 16.5523 19.5523 17 19 17H17V19C17 20.1046 16.1046 21 15 21H3C1.89543 21 1 20.1046 1 19V7C1 5.89543 1.89543 5 3 5H5V4H8Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M5 5H15C16.1046 5 17 5.89543 17 7V17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
          Copy
        `;

        // Wrap the pre element
        pre.parentNode.insertBefore(wrapper, pre);
        wrapper.appendChild(pre);
        wrapper.appendChild(copyButton);

        // Add click event to copy button
        copyButton.addEventListener('click', async function() {
          const codeText = codeBlock.textContent;

          try {
            await navigator.clipboard.writeText(codeText);

            // Visual feedback - success
            const originalHTML = this.innerHTML;
            this.innerHTML = `
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M20 6L9 17L4 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
              Copied!
            `;
            this.style.color = '#22c55e';
            this.style.borderColor = '#22c55e';

            // Reset after 2 seconds
            setTimeout(() => {
              this.innerHTML = originalHTML;
              this.style.color = '';
              this.style.borderColor = '';
            }, 2000);

          } catch (err) {
            console.error('Failed to copy code:', err);

            // Fallback for older browsers or failed clipboard access
            try {
              // Create temporary textarea for fallback copy
              const textarea = document.createElement('textarea');
              textarea.value = codeText;
              textarea.style.position = 'fixed';
              textarea.style.left = '-9999px';
              document.body.appendChild(textarea);
              textarea.select();
              document.execCommand('copy');
              document.body.removeChild(textarea);

              // Success feedback
              const originalHTML = this.innerHTML;
              this.innerHTML = `
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M20 6L9 17L4 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                Copied!
              `;
              this.style.color = '#22c55e';
              this.style.borderColor = '#22c55e';

              setTimeout(() => {
                this.innerHTML = originalHTML;
                this.style.color = '';
                this.style.borderColor = '';
              }, 2000);

            } catch (fallbackErr) {
              // Show error feedback
              const originalHTML = this.innerHTML;
              this.innerHTML = `
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                Failed
              `;
              this.style.color = '#ef4444';
              this.style.borderColor = '#ef4444';

              setTimeout(() => {
                this.innerHTML = originalHTML;
                this.style.color = '';
                this.style.borderColor = '';
              }, 2000);
            }
          }
        });
      });
    });
  </script>

  <!-- Search Overlay Management -->
  <script is:inline>
    document.addEventListener('DOMContentLoaded', function() {
      // Create a global search overlay manager
      window.searchOverlay = {
        isOpen: false,
        component: null,

        open() {
          this.isOpen = true;
          this.updateComponent();
        },

        close() {
          this.isOpen = false;
          this.updateComponent();
        },

        updateComponent() {
          if (this.component) {
            this.component.setState({ isOpen: this.isOpen });
          }
        },

        registerComponent(component) {
          this.component = component;
        }
      };

      // Handle search trigger button click
      const searchTrigger = document.getElementById('search-trigger');
      if (searchTrigger) {
        searchTrigger.addEventListener('click', function(e) {
          e.preventDefault();
          window.searchOverlay.open();
        });
      }
    });
  </script>

  <!-- Lazy load Mermaid only when diagrams are present -->
  <script type="module" src="/scripts/mermaid-loader.js"></script>
</body>
</html>