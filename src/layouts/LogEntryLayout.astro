---
import BaseLayout from './BaseLayout.astro';
import AnimatedTag from '../components/animations/AnimatedTag.jsx';
import AnimatedTagsContainer from '../components/animations/AnimatedTagsContainer.jsx';
import { formatTagForDisplay, sortTags } from '../utils/tagUtils';
import { getCollection, type CollectionEntry } from 'astro:content';
import CSSFadeIn from '../components/animations/CSSFadeIn.astro';
import NewsletterSubscribe from '../components/NewsletterSubscribe.astro';
import SchemaMarkup from '../components/SchemaMarkup.astro';
import CopyMarkdownButton from '../components/CopyMarkdownButton.jsx';
import ChatGPTButton from '../components/ChatGPTButton.jsx';
import { createBlogPostSchema, createBreadcrumbSchema } from '../utils/schemaUtils';
import AIWarning from '../components/AIWarning.astro';
import { getDiverseRelatedArticles } from '../utils/articleMatching';
import RelatedArticles from '../components/RelatedArticles.astro';
import ReadingProgress from '../components/ReadingProgress.astro';

interface Frontmatter {
  title: string;
  description?: string;
  date: Date;
  updated?: Date;
  tags?: string[];
  tldr?: string;
  author?: string;
  // Add any other frontmatter properties you expect
}

interface Props {
  frontmatter: Frontmatter;
}

const { frontmatter } = Astro.props as Props;
const sortedTags = frontmatter.tags ? sortTags(frontmatter.tags) : [];
const hasSlop = frontmatter.tags?.some(tag => tag.toUpperCase() === 'SLOP');

// Get the current URL for schema markup
const currentUrl = Astro.url.href;
const siteUrl = Astro.site ? Astro.site.toString() : Astro.url.origin;

// Get the slug from the URL path for dynamic OG image
const urlPath = Astro.url.pathname;
const slug = urlPath.split('/').filter(Boolean).pop() || '';
const ogImageUrl = new URL(`/api/og/${slug}`, siteUrl).toString();

// Create schema markup for the blog post
const blogPostSchema = createBlogPostSchema({
  title: frontmatter.title,
  description: frontmatter.description || frontmatter.tldr,
  date: frontmatter.date,
  url: currentUrl,
  tags: frontmatter.tags
});

// Create breadcrumb schema
const breadcrumbSchema = createBreadcrumbSchema([
  { name: "Home", url: "https://nibzard.com" },
  { name: "Log", url: "https://nibzard.com/log" },
  { name: frontmatter.title, url: currentUrl }
]);

// Get all log entries for smart recommendations
const allEntries = await getCollection('log', ({ data }) => !data.draft && data.date);

// Create current entry object for matching
const currentEntry = {
  title: frontmatter.title,
  tags: frontmatter.tags || [],
  topics: frontmatter.topics || [],
  entities: frontmatter.entities || [],
  date: frontmatter.date
};

// Get diverse related articles for "Related Articles" section (3 articles)
const relatedArticlesEntries = getDiverseRelatedArticles(
  currentEntry,
  allEntries.filter(entry => entry.data.title !== frontmatter.title),
  3
);

// Note: Article-specific Open Graph tags are added conditionally in <head> when date exists
---
<BaseLayout title={`${frontmatter.title} - Log - nibzard`} description={frontmatter.description || `Log entry: ${frontmatter.title}`} ogImage={ogImageUrl}>
  <!-- Additional meta tags in head -->
  <Fragment slot="head">
    <!-- Open Graph article author -->
    <meta property="og:article:author" content={new URL("/about", siteUrl).toString()}>

    <!-- Enhanced Open Graph for articles (only when date is present) -->
    {frontmatter.date && (
      <>
        <meta property="og:type" content="article">
        <meta property="og:article:published_time" content={frontmatter.date.toISOString()}>
        <meta property="og:article:section" content="Technology">
        {frontmatter.tags?.map(tag => (
          <meta property="og:article:tag" content={tag}>
        ))}
      </>
    )}
  </Fragment>

  <!-- Blog Post Schema Markup -->
  <SchemaMarkup schema={blogPostSchema} />
  <SchemaMarkup schema={breadcrumbSchema} />

  <article class="fade-in">
    <header class="log-entry-header">
      {frontmatter.date && (
        <div class="article-header-tools">
          <div class="publication-meta">
            Published on <time datetime={frontmatter.date.toISOString()}>
              {new Date(frontmatter.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
            </time>
            {frontmatter.updated && (
              <>
                {' • '}Updated on <time datetime={frontmatter.updated.toISOString()}>
                  {new Date(frontmatter.updated).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                </time>
              </>
            )}
          </div>
          <div class="article-actions">
            <CopyMarkdownButton client:idle slug={slug} />
            <ChatGPTButton client:idle slug={slug} title={frontmatter.title} />
          </div>
        </div>
      )}
      <h1>{frontmatter.title}</h1>
      {frontmatter.author && (
        <p class="log-entry-meta">
          <span class="author-meta">
            by <a href="/bio" class="author-link">{frontmatter.author}</a>
          </span>
        </p>
      )}
      {frontmatter.tldr && (
        <p class="log-entry-tldr">TL;DR &gt;&gt; {frontmatter.tldr} &lt;&lt;</p>
      )}
    </header>

    {sortedTags.length > 0 && (
      <section class="article-tags-section">
        <div class="tags-header">
          <span class="tags-label">Topics:</span>
          <AnimatedTagsContainer client:visible className="tags-inline">
            {sortedTags.map((tag: string) => {
              const formattedTag = formatTagForDisplay(tag);
              return (
                <AnimatedTag
                  client:visible
                  href={`/tags/${tag.toLowerCase()}`}
                  tagText={formattedTag}
                />
              );
            })}
          </AnimatedTagsContainer>
        </div>
      </section>
    )}

    {hasSlop && <AIWarning />}
    <div class="log-content">
      <slot /> {/* Content from the Markdown file will be rendered here */}
    </div>

    {relatedArticlesEntries.length > 0 && (
      <CSSFadeIn delay={0.1}>
        <RelatedArticles
          relatedEntries={relatedArticlesEntries}
          currentTitle={frontmatter.title}
        />
      </CSSFadeIn>
    )}

    <CSSFadeIn delay={0.2}>
      <section class="author-section" id="author" itemscope itemtype="https://schema.org/Person">
        <div class="author-container">
          <div class="author-info">
            <h3 class="author-name">
              <a href="/bio" class="author-link" itemprop="url">
                <span itemprop="name">Nikola Balić</span>
              </a>
            </h3>
            <p class="author-bio" itemprop="description">
              Building go-to-market engines for AI-driven products with purpose.
              Worked with innovative startups like <strong>Numarics</strong>, <strong>Codeanywhere</strong>,
              <strong>Daytona</strong>, and <strong>Steel</strong> on growth strategies and market positioning.
              Faculty at University of Split, researching AI adoption patterns and developer tools.
            </p>
            <div class="author-social">
              <a href="https://x.com/nibzard" target="_blank" rel="noopener noreferrer" class="author-social-link" aria-label="Follow on X">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="20" height="20">
                  <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
                </svg>
              </a>
              <a href="https://www.linkedin.com/in/nikolabalic/" target="_blank" rel="noopener noreferrer" class="author-social-link" aria-label="Connect on LinkedIn">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="20" height="20">
                  <path d="M20.5 2h-17A1.5 1.5 0 002 3.5v17A1.5 1.5 0 003.5 22h17a1.5 1.5 0 001.5-1.5v-17A1.5 1.5 0 0020.5 2zM8 19H5v-9h3zM6.5 8.25A1.75 1.75 0 118.3 6.5a1.78 1.78 0 01-1.8 1.75zM19 19h-3v-4.74c0-1.42-.6-1.93-1.38-1.93A1.74 1.74 0 0013 14.19a.66.66 0 000 .14V19h-3v-9h2.9v1.3a3.11 3.11 0 012.7-1.4c1.55 0 3.36.86 3.36 3.66z"/>
                </svg>
              </a>
              <a href="https://github.com/nibzard" target="_blank" rel="noopener noreferrer" class="author-social-link" aria-label="Follow on GitHub">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="20" height="20">
                  <path d="M12 2C6.477 2 2 6.477 2 12c0 4.42 2.865 8.166 6.839 9.489.5.092.682-.217.682-.482 0-.237-.008-.866-.013-1.7-2.782.603-3.369-1.342-3.369-1.342-.454-1.155-1.11-1.462-1.11-1.462-.908-.62.069-.608.069-.608 1.003.07 1.531 1.03 1.531 1.03.892 1.529 2.341 1.087 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.11-4.555-4.943 0-1.091.39-1.984 1.029-2.683-.103-.253-.446-1.27.098-2.647 0 0 .84-.269 2.75 1.025A9.578 9.578 0 0112 6.836c.85.004 1.705.114 2.504.336 1.909-1.294 2.747-1.025 2.747-1.025.546 1.377.202 2.394.1 2.647.64.699 1.028 1.592 1.028 2.683 0 3.842-2.339 4.687-4.566 4.935.359.309.678.919.678 1.852 0 1.336-.012 2.415-.012 2.743 0 .267.18.578.688.48C19.138 20.161 22 16.416 22 12c0-5.523-4.477-10-10-10z"/>
                </svg>
              </a>
            </div>
          </div>
        </div>
      </section>
    </CSSFadeIn>

    <div class="section-spacer"></div>

    <NewsletterSubscribe />

    <ReadingProgress suggestedArticles={relatedArticlesEntries} />
  </article>
</BaseLayout>
