---
import BaseLayout from './BaseLayout.astro';
import AnimatedTag from '../components/animations/AnimatedTag.jsx';
import AnimatedTagsContainer from '../components/animations/AnimatedTagsContainer.jsx';
import { formatTagForDisplay, sortTags } from '../utils/tagUtils';
import { getCollection, type CollectionEntry } from 'astro:content';
import FadeIn from '../components/animations/FadeIn.jsx';
import NewsletterSubscribe from '../components/NewsletterSubscribe.astro';

interface Frontmatter {
  title: string;
  description?: string;
  date: Date;
  tags?: string[];
  tldr?: string;
  // Add any other frontmatter properties you expect
}

interface Props {
  frontmatter: Frontmatter;
}

const { frontmatter } = Astro.props as Props;
const sortedTags = frontmatter.tags ? sortTags(frontmatter.tags) : [];

// Get random log entries for the "Read More" section
const allEntries = await getCollection('log', ({ data }) => !data.draft);
// Filter out the current entry using the title (since we don't have the slug/id)
const otherEntries = allEntries.filter(entry => entry.data.title !== frontmatter.title);

// Randomly select two entries
let randomEntries: CollectionEntry<'log'>[] = [];
if (otherEntries.length > 0) {
  // Shuffle array and take first two entries (or all if less than 2)
  randomEntries = [...otherEntries]
    .sort(() => Math.random() - 0.5)
    .slice(0, Math.min(2, otherEntries.length));
}
---
<BaseLayout title={`${frontmatter.title} - Log - nibzard`} description={frontmatter.description || `Log entry: ${frontmatter.title}`}>
  <article class="fade-in">
    <header class="log-entry-header">
      {frontmatter.date && (
        <p class="log-entry-meta">
          Published on <time datetime={frontmatter.date.toISOString()}>
            {new Date(frontmatter.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
          </time>
        </p>
      )}
      <h1>{frontmatter.title}</h1>
      {frontmatter.tldr && (
        <p class="log-entry-tldr">TL;DR &gt;&gt; {frontmatter.tldr} &lt;&lt;</p>
      )}
    </header>
    <div class="log-content">
      <slot /> {/* Content from the Markdown file will be rendered here */}
    </div>
    {sortedTags.length > 0 && (
      <AnimatedTagsContainer client:visible className="tags">
        {sortedTags.map((tag: string) => {
          const formattedTag = formatTagForDisplay(tag);
          return (
            <AnimatedTag
              client:visible
              href={`/tags/${tag.toLowerCase()}`}
              tagText={formattedTag}
            />
          );
        })}
      </AnimatedTagsContainer>
    )}

    {randomEntries.length > 0 && (
      <FadeIn client:visible>
        <section class="read-more-section">
          <h2 class="read-more-title">Continue Reading</h2>
          <div class="card-container">
            {randomEntries.map((entry) => (
              <a href={`/${entry.slug}`} class="card">
                <p class="card-date">
                  <time datetime={entry.data.date.toISOString()}>
                    {new Date(entry.data.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                  </time>
                </p>
                <h3>{entry.data.title}</h3>
                {entry.data.description && (
                  <p>{entry.data.description}</p>
                )}
              </a>
            ))}
          </div>
        </section>
      </FadeIn>
    )}

    <div class="section-spacer"></div>

    <NewsletterSubscribe />
  </article>
</BaseLayout>