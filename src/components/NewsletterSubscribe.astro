---
import { server } from 'astro:actions';
/**
 * NewsletterSubscribe Component
 * A reusable newsletter subscription form with customizable button text
 */

interface Props {
  title?: string;
  description?: string;
  buttonText?: string;
  showButton?: boolean; // New property to control button visibility
}

const {
  title = "Stay Updated",
  description = "Subscribe to receive the latest updates and articles directly in your inbox.",
  buttonText = "Subscribe",
  showButton = true
} = Astro.props;

let formMessage: string | null = null;
let formMessageType: 'success' | 'error' | null = null;

if (Astro.request.method === "POST") {
  const result = await server.subscribe.safe(Astro.request);
  if (result && result.data && result.data.success) {
    formMessage = "Thanks for subscribing! Please check your email to confirm.";
    formMessageType = 'success';
  } else if (result && result.error) {
    formMessage = result.error.message || "An error occurred. Please try again.";
    formMessageType = 'error';
  } else {
    formMessage = "An unexpected issue occurred. Please try again.";
    formMessageType = 'error';
  }
}
---

<div class="newsletter-card">
  <h3>{title}</h3>
  <p>{description}</p>
  {formMessage && (
    <div class={`form-message ${formMessageType}`}>
      {formMessage}
    </div>
  )}
  <form class="newsletter-form" method="POST" action={server.subscribe.link}>
    <div class="newsletter-input-group">
      <input type="email" name="email" placeholder="Your email address" class="newsletter-input" required />
      {showButton && <button type="submit" class="newsletter-button">{buttonText}</button>}
    </div>
    <label class="newsletter-privacy">
      <input type="checkbox" required />
      <span>I agree to receive emails and can unsubscribe at any time</span>
    </label>
  </form>
</div>

<style>
  .newsletter-card {
    background-color: var(--color-subtle);
    border-radius: var(--border-radius);
    padding: var(--space-lg);
    border: 1px solid var(--color-border);
  }

  .newsletter-card h3 {
    margin-top: 0;
    margin-bottom: var(--space-sm);
  }

  .newsletter-form {
    margin-top: var(--space-md);
  }

  .newsletter-input-group {
    display: flex;
    gap: var(--space-xs);
    margin-bottom: var(--space-sm);
    flex-wrap: wrap;
  }

  .newsletter-input {
    flex: 1;
    min-width: 250px;
    padding: var(--space-sm);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    font-size: 1rem;
  }

  .newsletter-button {
    background-color: var(--color-accent2);
    color: white;
    border: none;
    padding: var(--space-sm) var(--space-md);
    border-radius: var(--border-radius);
    cursor: pointer;
    font-weight: 500;
  }

  .newsletter-privacy {
    display: flex;
    align-items: flex-start;
    gap: var(--space-xs);
    font-size: 0.8rem;
    color: var(--color-text-muted);
  }

  .newsletter-privacy input {
    margin-top: 3px;
  }

  @media (max-width: 768px) {
    .newsletter-input-group {
      flex-direction: column;
    }

    .newsletter-input {
      width: 100%;
    }

    .newsletter-button {
      width: 100%;
    }
  }

  .form-message {
    padding: var(--space-sm);
    border-radius: var(--border-radius);
    margin-bottom: var(--space-md);
    text-align: center;
  }
  .form-message.success {
    background-color: var(--color-success-bg);
    color: var(--color-success-text);
    border: 1px solid var(--color-success-border);
  }
  .form-message.error {
    background-color: var(--color-danger-bg);
    color: var(--color-danger-text);
    border: 1px solid var(--color-danger-border);
  }
</style>