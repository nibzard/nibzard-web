---
import BaseLayout from '../layouts/BaseLayout.astro';
import FadeIn from '../components/animations/FadeIn.jsx';
import { getCollection } from 'astro:content';
import tagColors, { getTagColors } from '../config/tagColors';
import ThoughtRenderer from '../components/ThoughtRenderer.astro';
import NowItemRenderer from '../components/NowItemRenderer.astro';
import ImageRenderer from '../components/ImageRenderer.astro';
import NewsletterSubscribe from '../components/NewsletterSubscribe.astro';
import CtaButton from '../components/CtaButton.astro';
import '../styles/index.less';

// Get all log entries that aren't drafts
const logEntries = await getCollection('log', ({ data }) => {
  return data.draft !== true;
});

// Sort entries by date (newest first)
logEntries.sort((a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf());

// Get all thoughts that aren't drafts
const thoughts = await getCollection('thoughts', ({ data }) => {
  return data.draft !== true;
});

// Sort thoughts by date (newest first)
thoughts.sort((a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf());

// Get all now entries that aren't drafts
const nowEntries = await getCollection('now', ({ data }) => {
  return data.draft !== true;
});

// Sort now entries by date (newest first)
nowEntries.sort((a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf());

// Get all image entries that aren't drafts
const imageEntries = await getCollection('images', ({ data }) => {
  return data.draft !== true;
});

// Sort image entries by date (newest first)
imageEntries.sort((a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf());

// Create interleaved feed with all types
const feedEntries = [];
const totalEntries = logEntries.length + thoughts.length + nowEntries.length + imageEntries.length;

// Use index variables to track position in each array
let logIndex = 0;
let thoughtIndex = 0;
let nowIndex = 0;
let imageIndex = 0;

// Function to safely get date value
function getDateValue(date: Date | null): number {
  return date ? date.valueOf() : 0;
}

// Add entries to feed in date order
while (feedEntries.length < 20 && feedEntries.length < totalEntries) {
  const nextLogDate = logIndex < logEntries.length ? logEntries[logIndex].data.date : null;
  const nextThoughtDate = thoughtIndex < thoughts.length ? thoughts[thoughtIndex].data.date : null;
  const nextNowDate = nowIndex < nowEntries.length ? nowEntries[nowIndex].data.date : null;
  const nextImageDate = imageIndex < imageEntries.length ? imageEntries[imageIndex].data.date : null;

  // Find the most recent date among available entries
  let mostRecentType: string | null = null;
  let mostRecentValue = 0;

  const logDateValue = getDateValue(nextLogDate);
  if (logDateValue > mostRecentValue) {
    mostRecentType = 'log';
    mostRecentValue = logDateValue;
  }

  const thoughtDateValue = getDateValue(nextThoughtDate);
  if (thoughtDateValue > mostRecentValue) {
    mostRecentType = 'thought';
    mostRecentValue = thoughtDateValue;
  }

  const nowDateValue = getDateValue(nextNowDate);
  if (nowDateValue > mostRecentValue) {
    mostRecentType = 'now';
    mostRecentValue = nowDateValue;
  }

  const imageDateValue = getDateValue(nextImageDate);
  if (imageDateValue > mostRecentValue) {
    mostRecentType = 'image';
    mostRecentValue = imageDateValue;
  }

  // Add the most recent entry to the feed
  if (mostRecentType === 'log') {
    feedEntries.push({ type: 'log', entry: logEntries[logIndex] });
    logIndex++;
  } else if (mostRecentType === 'thought') {
    feedEntries.push({ type: 'thought', entry: thoughts[thoughtIndex] });
    thoughtIndex++;
  } else if (mostRecentType === 'now') {
    feedEntries.push({ type: 'now', entry: nowEntries[nowIndex] });
    nowIndex++;
  } else if (mostRecentType === 'image') {
    feedEntries.push({ type: 'image', entry: imageEntries[imageIndex] });
    imageIndex++;
  } else {
    // No more entries
    break;
  }
}
---

<BaseLayout title="nibzard - Home" description="Welcome to nibzard, a minimal personal website and log.">
  <form
    class="search-bar-container form-group"
    action="/search"
    method="get"
    style="margin-bottom: var(--space-lg); display: flex; align-items: center; width: 100%; margin-left: calc(-1 * var(--space-xl)); margin-right: calc(-1 * var(--space-xl)); padding-left: var(--space-xl); padding-right: var(--space-xl);">
    <input
      class="form-input search-bar"
      type="text"
      name="q"
      placeholder="Search..."
      autocomplete="off"
      style="flex-grow: 1; margin-right: var(--space-sm);"
    />
    <button type="submit" class="button-primary">Search</button>
  </form>
  <div class="feed-timeline">
    {feedEntries.map((item, index) => {
      // Insert newsletter after 10th post
      const showNewsletter = index === 10;
      // Render appropriate entry based on type
      return (
        <>
          {item.type === 'thought' ? (
            <FadeIn client:visible delay={index * 0.01} yOffset={5}>
              <ThoughtRenderer entry={item.entry} />
            </FadeIn>
          ) : item.type === 'now' ? (
            <FadeIn client:visible delay={index * 0.01} yOffset={5}>
              <NowItemRenderer entry={item.entry} />
            </FadeIn>
          ) : item.type === 'image' ? (
            <FadeIn client:visible delay={index * 0.01} yOffset={5}>
              <div class="image-container">
                <ImageRenderer entry={item.entry} />
              </div>
            </FadeIn>
          ) : (
            <FadeIn client:visible delay={index * 0.01} yOffset={5}>
              {(() => {
                const logEntry = item.entry;
                const firstTag = 'tags' in logEntry.data ? logEntry.data.tags?.[0] || null : null;
                const tagColor = firstTag ? getTagColors(firstTag) : null;
                const borderStyle = tagColor ? `border-left-color: ${tagColor.borderColor}` : '';
                return (
                  <article class="log-entry" style={borderStyle}>
                    <div class="entry-meta">
                      <time datetime={logEntry.data.date.toISOString()}>
                        {new Date(logEntry.data.date).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })}
                      </time>
                      <div class="entry-tags">
                        {'tags' in logEntry.data && logEntry.data.tags && logEntry.data.tags.length > 0 && (
                          <div class="tag-container">
                            {logEntry.data.tags.map((tag: string) => {
                              const colors = getTagColors(tag);
                              const tagStyle = colors ?
                                `background-color: ${colors.backgroundColor}; color: ${colors.textColor}; border-color: ${colors.borderColor}` : '';
                              return (
                                <a href={`/tags/${tag.toLowerCase()}`} class="tag" style={tagStyle}>
                                  {tag}
                                </a>
                              );
                            })}
                          </div>
                        )}
                      </div>
                    </div>
                    <div class="log-entry-content">
                      <h2>
                        <a href={`/${logEntry.slug}`}>{'title' in logEntry.data ? logEntry.data.title : 'Log Entry'}</a>
                      </h2>
                      {'tldr' in logEntry.data && logEntry.data.tldr && (
                        <p class="log-entry-tldr">{logEntry.data.tldr}</p>
                      )}
                    </div>
                  </article>
                );
              })()}
            </FadeIn>
          )}
          {showNewsletter && (
            <FadeIn client:visible delay={0} yOffset={5}>
              <div class="newsletter-section">
                <NewsletterSubscribe
                  title="Stay Updated"
                  description="Subscribe to receive the latest updates and articles directly in your inbox."
                  showButton={true}
                />
              </div>
            </FadeIn>
          )}
        </>
      );
    })}
  </div>
  {/* Insert newsletter at the bottom */}
  <FadeIn client:visible delay={0} yOffset={5}>
    <div class="newsletter-section">
      <NewsletterSubscribe
        title="Stay Updated"
        description="Subscribe to receive the latest updates and articles directly in your inbox."
        showButton={true}
      />
    </div>
  </FadeIn>
</BaseLayout>

<style>
  /* Feed Timeline */
  .feed-timeline {
    margin: var(--space-xl) 0;
    display: flex;
    flex-direction: column;
    gap: var(--space-lg);
  }

  .search-bar-container {
    display: flex;
    justify-content: center;
    margin-bottom: var(--space-lg);
  }
  .search-bar {
    width: 100%;
    max-width: 500px;
    padding: var(--space-sm) var(--space-md);
    font-size: 1.1rem;
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    margin: 0 auto;
    box-sizing: border-box;
  }

  /* Image container - prevents border from log-entry */
  .image-container {
    border-left: none !important;
  }

  /* Log Timeline */
  .log-timeline {
    margin: var(--space-xl) 0;
  }

  .log-entry {
    padding: var(--space-md) 0;
    padding-left: var(--space-md);
    margin-bottom: var(--space-lg);
    border-left: 3px solid var(--color-subtle);
    transition: transform 0.2s ease-in-out;
  }

  .log-entry:hover {
    transform: translateX(4px);
  }

  .entry-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-md);
    flex-wrap: wrap;
    gap: var(--space-xs);
    font-family: var(--font-mono);
    font-size: 0.85rem;
    color: var(--color-text-muted);
  }

  .entry-tags {
    display: flex;
    justify-content: flex-end;
  }

  .tag-container {
    display: flex;
    gap: var(--space-xs);
    flex-wrap: wrap;
  }

  .tag {
    font-size: 0.7rem;
    padding: 2px var(--space-xs);
    border-radius: var(--border-radius);
    text-decoration: none;
    border: 1px solid transparent;
    font-family: var(--font-mono);
  }

  .log-entry-content h2 {
    font-size: 1.6rem;
    margin-bottom: var(--space-sm);
    line-height: 1.3;
  }

  .log-entry-content h2 a {
    text-decoration: none;
    color: var(--color-text);
    transition: color 0.2s ease;
  }

  .log-entry-content h2 a:hover {
    color: var(--color-accent-2);
  }

  .log-entry-tldr {
    color: var(--color-text-muted);
    line-height: 1.5;
    margin: 0;
  }

  /* Newsletter section */
  .newsletter-section {
    margin: var(--space-xl) 0;
  }

  .subscribe-button {
    min-width: 180px;
  }

  .newsletter-card {
    background-color: var(--color-subtle);
    border-radius: var(--border-radius);
    padding: var(--space-lg);
  }

  .newsletter-card h3 {
    margin-top: 0;
    margin-bottom: var(--space-sm);
  }

  .newsletter-form {
    margin-top: var(--space-md);
  }

  .newsletter-input-group {
    display: flex;
    gap: var(--space-xs);
    margin-bottom: var(--space-sm);
    flex-wrap: wrap;
  }

  .newsletter-input {
    flex: 1;
    min-width: 250px;
    padding: var(--space-sm);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    font-size: 1rem;
  }

  .newsletter-button {
    background-color: var(--color-accent-2);
    color: white;
    border: none;
    padding: var(--space-sm) var(--space-md);
    border-radius: var(--border-radius);
    cursor: pointer;
    font-weight: 500;
  }

  .newsletter-privacy {
    display: flex;
    align-items: flex-start;
    gap: var(--space-xs);
    font-size: 0.8rem;
    color: var(--color-text-muted);
  }

  .newsletter-privacy input {
    margin-top: 3px;
  }

  /* Footer */
  .footer-simple {
    margin-top: var(--space-xl);
    padding: var(--space-md);
    border-top: 1px solid var(--color-subtle);
  }

  .footer-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: var(--space-md);
  }

  .footer-content p {
    color: var(--color-text-muted);
    font-size: 0.9rem;
    margin: 0;
  }

  .footer-links {
    display: flex;
    gap: var(--space-md);
  }

  .footer-links a {
    color: var(--color-accent-2);
    text-decoration: none;
    font-size: 0.9rem;
  }

  .footer-links a:hover {
    text-decoration: underline;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .entry-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--space-sm);
    }

    .entry-tags {
      width: 100%;
      justify-content: flex-start;
      margin-top: var(--space-xs);
    }

    .newsletter-input-group {
      flex-direction: column;
    }

    .newsletter-input {
      width: 100%;
    }

    .newsletter-button {
      width: 100%;
    }

    .footer-content {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--space-sm);
    }

    .thought-content blockquote {
      font-size: var(--font-size-base);
    }

    .thought-content blockquote::before {
      font-size: 2.5rem;
      left: -0.25rem;
      top: -1.25rem;
    }
  }
</style>

<script>
  // @ts-nocheck
  // Render feed entries dynamically (client-side)
  window.renderFeed = function(entries, container) {
    // This function should clear and re-render the feedTimeline div
    // For brevity, we'll just reload the page if search is cleared, or show a message if no results
    if (!entries.length) {
      container.innerHTML = '<div style="text-align:center;color:var(--color-text-muted);padding:2rem;">No results found.</div>';
      return;
    }
    // Optionally, you can render a simplified version or re-use server-rendered HTML snippets
    // For now, reload page if search is cleared (fallback)
    location.reload();
  };
  // @ts-nocheck
  // Initialize functionality for the interactive elements
  document.addEventListener('DOMContentLoaded', () => {
    // Newsletter form handling
    const newsletterForm = document.querySelector('.newsletter-form');
    if (newsletterForm) {
      newsletterForm.addEventListener('submit', (e) => {
        e.preventDefault();
        // In a real implementation, this would send the form data to a server
        const emailInput = newsletterForm.querySelector('input[type="email"]');
        if (emailInput && emailInput.value) {
          alert(`Thank you for subscribing with ${emailInput.value}!`);
          emailInput.value = '';
        }
      });
    }
  });
</script>