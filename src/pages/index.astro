---
import BaseLayout from '../layouts/BaseLayout.astro';
import FadeIn from '../components/animations/FadeIn.jsx';
import { getCollection } from 'astro:content';
import tagColors, { getTagColors } from '../config/tagColors';
import ThoughtRenderer from '../components/ThoughtRenderer.astro';
import NowItemRenderer from '../components/NowItemRenderer.astro';
import ImageRenderer from '../components/ImageRenderer.astro';
import IdeaRenderer from '../components/IdeaRenderer.astro';
import NewsletterSubscribe from '../components/NewsletterSubscribe.astro';
import CtaButton from '../components/CtaButton.astro';
import AnimatedTag from '../components/animations/AnimatedTag.jsx';
// import '../styles/index.css';

// Get current page and page size
const { searchParams } = Astro.url;
const currentPage = parseInt(searchParams.get('page') || '1', 10);
const pageSize = 20; // Number of entries per page

// Get all log entries that aren't drafts
const logEntries = await getCollection('log', ({ data }) => {
  return data.draft !== true;
});

// Sort entries by date (newest first)
logEntries.sort((a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf());

// Get all thoughts that aren't drafts
const thoughts = await getCollection('thoughts', ({ data }) => {
  return data.draft !== true;
});

// Sort thoughts by date (newest first)
thoughts.sort((a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf());

// Get all now entries that aren't drafts
const nowEntries = await getCollection('now', ({ data }) => {
  return data.draft !== true;
});

// Sort now entries by date (newest first)
nowEntries.sort((a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf());

// Get all image entries that aren't drafts
const imageEntries = await getCollection('images', ({ data }) => {
  return data.draft !== true;
});

// Sort image entries by date (newest first)
imageEntries.sort((a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf());

// Get all idea entries that aren't drafts
const ideaEntries = await getCollection('idea', ({ data }) => {
  return data.draft !== true;
});

// Sort idea entries by date (newest first)
ideaEntries.sort((a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf());

// Create interleaved feed with all types
let allFeedEntries = []; // Renamed from feedEntries to gather all first
const totalEntries = logEntries.length + thoughts.length + nowEntries.length + imageEntries.length + ideaEntries.length;

// Use index variables to track position in each array
let logIndex = 0;
let thoughtIndex = 0;
let nowIndex = 0;
let imageIndex = 0;
let ideaIndex = 0;

// Function to safely get date value
function getDateValue(date: Date | null): number {
  return date ? date.valueOf() : 0;
}

// Add entries to feed in date order
while (allFeedEntries.length < totalEntries) { // Changed condition to collect all entries
  const nextLogDate = logIndex < logEntries.length ? logEntries[logIndex].data.date : null;
  const nextThoughtDate = thoughtIndex < thoughts.length ? thoughts[thoughtIndex].data.date : null;
  const nextNowDate = nowIndex < nowEntries.length ? nowEntries[nowIndex].data.date : null;
  const nextImageDate = imageIndex < imageEntries.length ? imageEntries[imageIndex].data.date : null;
  const nextIdeaDate = ideaIndex < ideaEntries.length ? ideaEntries[ideaIndex].data.date : null;

  // Find the most recent date among available entries
  let mostRecentType: string | null = null;
  let mostRecentValue = 0;

  const logDateValue = getDateValue(nextLogDate);
  if (logDateValue > mostRecentValue) {
    mostRecentType = 'log';
    mostRecentValue = logDateValue;
  }

  const thoughtDateValue = getDateValue(nextThoughtDate);
  if (thoughtDateValue > mostRecentValue) {
    mostRecentType = 'thought';
    mostRecentValue = thoughtDateValue;
  }

  const nowDateValue = getDateValue(nextNowDate);
  if (nowDateValue > mostRecentValue) {
    mostRecentType = 'now';
    mostRecentValue = nowDateValue;
  }

  const imageDateValue = getDateValue(nextImageDate);
  if (imageDateValue > mostRecentValue) {
    mostRecentType = 'image';
    mostRecentValue = imageDateValue;
  }

  const ideaDateValue = getDateValue(nextIdeaDate);
  if (ideaDateValue > mostRecentValue) {
    mostRecentType = 'idea';
    mostRecentValue = ideaDateValue;
  }

  // Add the most recent entry to the feed
  if (mostRecentType === 'log') {
    allFeedEntries.push({ type: 'log', entry: logEntries[logIndex] });
    logIndex++;
  } else if (mostRecentType === 'thought') {
    allFeedEntries.push({ type: 'thought', entry: thoughts[thoughtIndex] });
    thoughtIndex++;
  } else if (mostRecentType === 'now') {
    allFeedEntries.push({ type: 'now', entry: nowEntries[nowIndex] });
    nowIndex++;
  } else if (mostRecentType === 'image') {
    allFeedEntries.push({ type: 'image', entry: imageEntries[imageIndex] });
    imageIndex++;
  } else if (mostRecentType === 'idea') {
    allFeedEntries.push({ type: 'idea', entry: ideaEntries[ideaIndex] });
    ideaIndex++;
  } else {
    // No more entries
    break;
  }
}

// Paginate the feed entries
const totalPages = Math.ceil(allFeedEntries.length / pageSize);
const startIndex = (currentPage - 1) * pageSize;
const endIndex = startIndex + pageSize;
const feedEntries = allFeedEntries.slice(startIndex, endIndex); // These are the entries for the current page
---

<BaseLayout title="nibzard - Home" description="Welcome to nibzard, a minimal personal website and log.">
  <form
    class="search-bar-container form-group"
    action="/search"
    method="get"
    autocomplete="off"
    style="width: 100%; margin-bottom: var(--space-lg);">
    <input
      class="form-input search-bar"
      type="text"
      name="q"
      placeholder="Search..."
      autocomplete="off"
    />
    <button type="submit" class="button-primary">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="20" height="20" style="margin-right: 0.5em;"><circle cx="11" cy="11" r="7" stroke-width="2"/><line x1="16.5" y1="16.5" x2="21" y2="21" stroke-width="2"/></svg>
      Search
    </button>
  </form>
  <div class="feed-timeline">
    {feedEntries.map((item, index) => {
      // Insert newsletter after 10th post (adjust if pageSize changes)
      const showNewsletter = index === 10 && currentPage === 1 && feedEntries.length >= pageSize; // Only show if enough items
      // Render appropriate entry based on type
      return (
        <>
          {item.type === 'thought' ? (
            <FadeIn client:visible delay={index * 0.01} yOffset={5}>
              <ThoughtRenderer entry={item.entry} />
            </FadeIn>
          ) : item.type === 'now' ? (
            <FadeIn client:visible delay={index * 0.01} yOffset={5}>
              <NowItemRenderer entry={item.entry} />
            </FadeIn>
          ) : item.type === 'image' ? (
            <FadeIn client:visible delay={index * 0.01} yOffset={5}>
              <div class="image-container">
                <ImageRenderer entry={item.entry} />
              </div>
            </FadeIn>
          ) : item.type === 'idea' ? (
            <FadeIn client:visible delay={index * 0.01} yOffset={5}>
              <IdeaRenderer entry={item.entry} />
            </FadeIn>
          ) : (
            <FadeIn client:visible delay={index * 0.01} yOffset={5}>
              {(() => {
                const logEntry = item.entry;
                const firstTag = 'tags' in logEntry.data ? logEntry.data.tags?.[0] || null : null;
                const tagColor = firstTag ? getTagColors(firstTag) : null;
                const borderStyle = tagColor ? `border-left-color: ${tagColor.borderColor}` : '';
                return (
                  <article class="log-entry" style={borderStyle}>
                    <div class="entry-meta">
                      <time datetime={logEntry.data.date.toISOString()}>
                        {new Date(logEntry.data.date).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })}
                      </time>
                      <div class="entry-tags">
                        {'tags' in logEntry.data && logEntry.data.tags && logEntry.data.tags.length > 0 && (
                          <div class="tag-container">
                            {logEntry.data.tags.map((tag: string) => {
                              const formattedTag = tag;
                              return (
                                <AnimatedTag
                                  client:visible
                                  href={`/tags/${tag.toLowerCase()}`}
                                  tagText={formattedTag}
                                />
                              );
                            })}
                          </div>
                        )}
                      </div>
                    </div>
                    <div class="log-entry-content">
                      <h2>
                        <a href={`/${logEntry.slug}`}>{'title' in logEntry.data ? logEntry.data.title : 'Log Entry'}</a>
                      </h2>
                      {'tldr' in logEntry.data && logEntry.data.tldr && (
                        <p class="log-entry-tldr">{logEntry.data.tldr}</p>
                      )}
                      <div>
                        <a href={`/${logEntry.slug}`} class="read-full-post-link">Read full post →</a>
                      </div>
                    </div>
                  </article>
                );
              })()}
            </FadeIn>
          )}
          {showNewsletter && (
            <FadeIn client:visible delay={0} yOffset={5}>
              <div class="newsletter-section">
                <NewsletterSubscribe
                  title="Stay Updated"
                  description="Subscribe to receive the latest updates and articles directly in your inbox."
                  showButton={true}
                />
              </div>
            </FadeIn>
          )}
        </>
      );
    })}
  </div>
  {/* Insert newsletter at the bottom */}
  <FadeIn client:visible delay={0} yOffset={5}>
    <div class="newsletter-section">
      <NewsletterSubscribe
        title="Stay Updated"
        description="Subscribe to receive the latest updates and articles directly in your inbox."
        showButton={true}
      />
    </div>
  </FadeIn>

  {totalPages > 1 && (
    <nav class="pagination" aria-label="Pagination" style="margin-top: var(--space-lg); margin-bottom: var(--space-lg);">
      {currentPage > 1 && (
        <a href={`/?page=${currentPage - 1}`} class="pagination-prev" aria-label="Previous page">←</a>
      )}
      {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
        <a
          href={`/?page=${page}`}
          class={`pagination-page ${page === currentPage ? 'pagination-active' : ''}`}
          aria-current={page === currentPage ? 'page' : undefined}
        >
          {page}
        </a>
      ))}
      {currentPage < totalPages && (
        <a href={`/?page=${currentPage + 1}`} class="pagination-next" aria-label="Next page">→</a>
      )}
    </nav>
  )}
</BaseLayout>

<script>
  // @ts-nocheck
  // Render feed entries dynamically (client-side)
  window.renderFeed = function(entries, container) {
    // This function should clear and re-render the feedTimeline div
    // For brevity, we'll just reload the page if search is cleared, or show a message if no results
    if (!entries.length) {
      container.innerHTML = '<div style="text-align:center;color:var(--color-text-muted);padding:2rem;">No results found.</div>';
      return;
    }
    // Optionally, you can render a simplified version or re-use server-rendered HTML snippets
    // For now, reload page if search is cleared (fallback)
    location.reload();
  };
  // @ts-nocheck
  // Initialize functionality for the interactive elements
  document.addEventListener('DOMContentLoaded', () => {
    // Newsletter form handling
    const newsletterForm = document.querySelector('.newsletter-form');
    if (newsletterForm) {
      newsletterForm.addEventListener('submit', (e) => {
        e.preventDefault();
        // In a real implementation, this would send the form data to a server
        const emailInput = newsletterForm.querySelector('input[type="email"]');
        if (emailInput && emailInput.value) {
          alert(`Thank you for subscribing with ${emailInput.value}!`);
          emailInput.value = '';
        }
      });
    }
  });
</script>