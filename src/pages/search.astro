---
import BaseLayout from '../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
// import '../styles/index.less';

const { searchParams } = new URL(import.meta.env.SITE + Astro.request.url);
const initialQuery = searchParams.get('q') || '';

const logEntries = await getCollection('log', ({ data }) => data.draft !== true);
const thoughts = await getCollection('thoughts', ({ data }) => data.draft !== true);
const nowEntries = await getCollection('now', ({ data }) => data.draft !== true);
const imageEntries = await getCollection('images', ({ data }) => data.draft !== true);

// Define helper functions s and a in the frontmatter scope as well
const s = (val: any, def = '') => (val === null || typeof val === 'undefined') ? def : String(val);
const a = (val: any, def = []) => Array.isArray(val) ? val : def;

const clientFeedEntries = [
  ...logEntries.map(entry => ({
    type: 'log',
    slug: s(entry.slug),
    date: entry.data.date.toISOString(),
    title: s(entry.data.title),
    tldr: s(entry.data.tldr),
    tags: a(entry.data.tags),
  })),
  ...thoughts.map(entry => ({
    type: 'thought',
    slug: s(entry.slug),
    date: entry.data.date.toISOString(),
    text: s((entry.data as any)?.text),
    tags: a((entry.data as any)?.tags),
  })),
  ...nowEntries.map(entry => ({
    type: 'now',
    slug: s(entry.slug),
    date: entry.data.date.toISOString(),
    title: s((entry.data as any)?.title),
    text: s((entry.data as any)?.text),
    tags: a((entry.data as any)?.tags),
  })),
  ...imageEntries.map(entry => ({
    type: 'image',
    slug: s(entry.slug),
    date: entry.data.date.toISOString(),
    caption: s((entry.data as any)?.caption),
    imageUrl: s((entry.data as any)?.image?.src),
    tags: a((entry.data as any)?.tags),
  })),
];

let clientFeedEntriesJsonString = '';
try {
  clientFeedEntriesJsonString = JSON.stringify(clientFeedEntries);
} catch (e) {
  console.error("Error stringifying clientFeedEntries on server:", e);
  clientFeedEntriesJsonString = JSON.stringify([{ type: 'error', message: 'Could not serialize search data.'}]);
}

---

<BaseLayout title={`Search Results for "${initialQuery}" | nibzard`} description={`Search results for "${initialQuery}" on nibzard.`}>
  <div class="search-page-container">
    <h1>Search</h1>
    <form
      id="search-form"
      class="form-group"
      action="/search"
      method="get"
      style="margin-bottom: var(--space-lg); display: flex; align-items: center; width: 100%; margin-left: calc(-1 * var(--space-xl)); margin-right: calc(-1 * var(--space-xl)); padding-left: var(--space-xl); padding-right: var(--space-xl);">
      <input
        class="form-input search-bar"
        type="text"
        name="q"
        id="search-input"
        value={initialQuery}
        placeholder="Search..."
        autocomplete="off"
        style="flex-grow: 1; margin-right: var(--space-sm);"
      />
      <button type="submit" class="button-primary">Search</button>
    </form>

    <div id="feed-timeline" class="feed-timeline" style="min-height: 200px;">
      {/* Search results will be rendered here by client-side script */}
    </div>
  </div>
</BaseLayout>

<script type="module">
  import Fuse from 'https://cdn.jsdelivr.net/npm/fuse.js@7.1.0/dist/fuse.mjs';
  // @ts-nocheck

  // Define helper functions s and a in the client-side scope
  const s = (val, def = '') => (val === null || typeof val === 'undefined') ? def : String(val);
  const a = (val, def = []) => Array.isArray(val) ? val : def;

  document.addEventListener('DOMContentLoaded', () => {
    const feedTimeline = document.getElementById('feed-timeline');
    const searchInput = document.querySelector('.search-bar');
    const jsonDataScript = document.getElementById('fuse-feed-data');
    let clientFeedEntriesData = [];
    let rawJsonContent = '';

    if (jsonDataScript) {
      rawJsonContent = jsonDataScript.textContent;
      console.log('Attempting to parse JSON, raw textContent:', rawJsonContent);
      try {
        clientFeedEntriesData = JSON.parse(rawJsonContent);
        if (Array.isArray(clientFeedEntriesData) && clientFeedEntriesData.length === 1 && clientFeedEntriesData[0].type === 'error') {
          console.error('Search data serialization error from server:', clientFeedEntriesData[0].message);
          feedTimeline.innerHTML = `<div style="text-align:center;color:var(--color-error);padding:2rem;">Error: ${clientFeedEntriesData[0].message}</div>`;
          return;
        }
      } catch (error) {
        console.error('Failed to parse JSON data:', error);
        console.error('Problematic JSON string was:', rawJsonContent);
        if (feedTimeline) feedTimeline.innerHTML = '<div style="text-align:center;color:var(--color-error);padding:2rem;">Error: Could not load search data. Invalid format.</div>';
        return;
      }
    } else {
      console.error('Could not find JSON data script tag (fuse-feed-data).');
      if (feedTimeline) feedTimeline.innerHTML = '<div style="text-align:center;color:var(--color-error);padding:2rem;">Error: Search data script element not found.</div>';
      return;
    }

    const initialQueryFromURL = new URLSearchParams(window.location.search).get('q') || '';

    if (searchInput && searchInput.value !== initialQueryFromURL) {
      searchInput.value = initialQueryFromURL;
    }

    function formatDate(dateStr) {
      const d = new Date(dateStr);
      return d.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
    }

    function renderFeed(entries) {
      if (!feedTimeline) return;
      if (!entries || !entries.length) {
        feedTimeline.innerHTML = '<div style="text-align:center;color:var(--color-text-muted);padding:2rem;">No results found.</div>';
        return;
      }
      feedTimeline.innerHTML = entries.map((item, index) => {
        const date = item.date ? formatDate(item.date) : 'Date N/A';
        let entryHtml = '';
        const itemTitle = s(item.title);
        const itemTldr = s(item.tldr);
        const itemText = s(item.text);
        const itemCaption = s(item.caption);
        const itemImageUrl = s(item.imageUrl);
        const itemSlug = s(item.slug, '#');

        switch (item.type) {
          case 'log':
            entryHtml = `
              <article class="log-entry">
                <div class="entry-meta"><time>${date}</time></div>
                <div class="log-entry-content">
                  <h2><a href="/${itemSlug}">${itemTitle}</a></h2>
                  ${itemTldr ? `<p class="log-entry-tldr">${itemTldr}</p>` : ''}
                </div>
              </article>`;
            break;
          case 'thought':
            entryHtml = `
              <div class="thought-entry">
                <div class="entry-meta"><time>${date}</time> Thought</div>
                <blockquote><a href="/${itemSlug}">${itemText}</a></blockquote>
              </div>`;
            break;
          case 'now':
            entryHtml = `
              <div class="now-entry">
                <div class="entry-meta"><time>${date}</time> Now</div>
                <div>${itemTitle || itemText}</div>
              </div>`;
            break;
          case 'image':
            entryHtml = `
              <div class="image-entry">
                <div class="entry-meta"><time>${date}</time> Image</div>
                <div>
                  ${itemImageUrl ? `<img src="${itemImageUrl}" alt="${itemCaption || 'Search result image'}" style="max-width: 100%; border-radius: var(--border-radius); margin-bottom: var(--space-sm);"/>` : ''}
                  <p>${itemCaption}</p>
                </div>
              </div>`;
            break;
        }
        return entryHtml;
      }).join('');
    }

    const fuse = new Fuse(clientFeedEntriesData, {
      keys: [
        'title', 'tldr', 'tags', 'text', 'caption', 'slug', 'imageUrl'
      ],
      threshold: 0.4,
      ignoreLocation: true,
      minMatchCharLength: 2,
    });

    function doSearch(query) {
      if (!query) {
        renderFeed(clientFeedEntriesData);
        return;
      }
      const results = fuse.search(query).map(r => r.item);
      renderFeed(results);
    }

    if (searchInput) {
      doSearch(initialQueryFromURL);
      searchInput.addEventListener('input', (e) => {
        doSearch(e.target.value.trim());
      });
    } else {
        console.error('Search input not found on the page.');
    }
  });
</script>

<script type="application/json" id="fuse-feed-data" set:html={clientFeedEntriesJsonString}></script>

<style>
/* Styles for index page - more compact */

.hero {
  margin: var(--space-lg) 0;
  text-align: center;
}

.hero h1 {
  font-size: 2rem;
  margin-bottom: var(--space-xs);
  /* Create a subtle Japanese/Scandinavian feel with minimal decoration */
}

.hero h1::before, .hero h1::after {
  content: "â€•";
  color: var(--color-accent1);
  display: inline-block;
  margin: 0 var(--space-sm);
  font-weight: normal;
  opacity: 0.8;
}

.hero p {
  max-width: 32rem;
  margin: 0 auto var(--space-md);
  font-size: 1rem;
  color: var(--color-text-muted);
  line-height: 1.4;
}

/* Style the CTA button with Scandinavian simplicity */
.cta-button {
  display: inline-block;
  font-family: var(--font-mono);
  font-size: 0.85rem;
  background-color: var(--color-background);
  color: var(--color-accent1);
  border: 1px solid var(--color-accent1);
  border-radius: var(--border-radius);
  padding: var(--space-xs) var(--space-md);
  text-decoration: none;
  transition: all var(--transition-fast);
}

.cta-button:hover {
  background-color: var(--color-accent1);
  color: white;
  transform: translateY(-1px);
}

/* Recent posts section */
.recent-posts {
  margin: var(--space-xl) 0;
}

.recent-posts h2 {
  font-size: 1.3rem;
  margin-bottom: var(--space-md);
  /* Terminal-inspired heading indicator */
}

.recent-posts h2::before {
  content: "> ";
  color: var(--color-accent2);
}

.recent-posts em {
  color: var(--color-text-muted);
}

.recent-posts a {
  font-family: var(--font-mono);
  font-size: 0.9rem;
}

/* ASCII-inspired decorative elements */
.ascii-decoration {
  font-family: var(--font-mono);
  color: var(--color-text-muted);
  text-align: center;
  line-height: 1.2;
  margin: var(--space-lg) 0;
  font-size: 0.9rem;
}

/* Media Queries for Different Screen Sizes */
@media (max-width: 768px) {
  .hero h1 {
    font-size: 1.7rem;
  }

  .hero h1::before, .hero h1::after {
    margin: 0 var(--space-xs);
  }

  .hero p {
    font-size: 0.95rem;
  }
}

@media (max-width: 480px) {
  .hero h1::before, .hero h1::after {
    display: none;
  }
}

/* Feed Timeline */
.feed-timeline {
  margin: var(--space-xl) 0;
  display: flex;
  flex-direction: column;
  gap: var(--space-lg);
}

.search-bar-container {
  display: flex;
  justify-content: center;
  margin-bottom: var(--space-lg);
}
.search-bar {
  width: 100%;
  max-width: 500px;
  padding: var(--space-sm) var(--space-md);
  font-size: 1.1rem;
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius);
  margin: 0 auto;
  box-sizing: border-box;
}

/* Image container - prevents border from log-entry */
.image-container {
  border-left: none !important;
}

/* Log Timeline */
.log-timeline {
  margin: var(--space-xl) 0;
}

.log-entry {
  padding: var(--space-md) 0;
  padding-left: var(--space-md);
  margin-bottom: var(--space-lg);
  border-left: 3px solid var(--color-subtle);
  transition: transform 0.2s ease-in-out;
}

.log-entry:hover {
  transform: translateX(4px);
}

.entry-meta {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--space-md);
  flex-wrap: wrap;
  gap: var(--space-xs);
  font-family: var(--font-mono);
  font-size: 0.85rem;
  color: var(--color-text-muted);
}

.entry-tags {
  display: flex;
  justify-content: flex-end;
}

.tag-container {
  display: flex;
  gap: var(--space-xs);
  flex-wrap: wrap;
}

.tag {
  font-size: 0.7rem;
  padding: 2px var(--space-xs);
  border-radius: var(--border-radius);
  text-decoration: none;
  border: 1px solid transparent;
  font-family: var(--font-mono);
}

.log-entry-content h2 {
  font-size: 1.6rem;
  margin-bottom: var(--space-sm);
  line-height: 1.3;
}

.log-entry-content h2 a {
  text-decoration: none;
  color: var(--color-text);
  transition: color 0.2s ease;
}

.log-entry-content h2 a:hover {
  color: var(--color-accent-2);
}

.log-entry-tldr {
  color: var(--color-text-muted);
  line-height: 1.5;
  margin: 0;
}

/* Newsletter section */
.newsletter-section {
  margin: var(--space-xl) 0;
}

.subscribe-button {
  min-width: 180px;
}

.newsletter-card {
  background-color: var(--color-form);
  border-radius: var(--border-radius);
  padding: var(--space-lg);
}

.newsletter-card h3 {
  margin-top: 0;
  margin-bottom: var(--space-sm);
}

.newsletter-form {
  margin-top: var(--space-md);
}

.newsletter-input-group {
  display: flex;
  gap: var(--space-xs);
  margin-bottom: var(--space-sm);
  flex-wrap: wrap;
}

.newsletter-input {
  flex: 1;
  min-width: 250px;
  padding: var(--space-sm);
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius);
  font-size: 1rem;
}

.newsletter-button {
  background-color: var(--color-accent-2);
  color: white;
  border: none;
  padding: var(--space-sm) var(--space-md);
  border-radius: var(--border-radius);
  cursor: pointer;
  font-weight: 500;
}

.newsletter-privacy {
  display: flex;
  align-items: flex-start;
  gap: var(--space-xs);
  font-size: 0.8rem;
  color: var(--color-text-muted);
}

.newsletter-privacy input {
  margin-top: 3px;
}

/* Footer */
.footer-simple {
  margin-top: var(--space-xl);
  padding: var(--space-md);
  border-top: 1px solid var(--color-subtle);
}

.footer-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: var(--space-md);
}

.footer-content p {
  color: var(--color-text-muted);
  font-size: 0.9rem;
  margin: 0;
}

.footer-links {
  display: flex;
  gap: var(--space-md);
}

.footer-links a {
  color: var(--color-accent-2);
  text-decoration: none;
  font-size: 0.9rem;
}

.footer-links a:hover {
  text-decoration: underline;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .entry-meta {
    flex-direction: column;
    align-items: flex-start;
    gap: var(--space-sm);
  }

  .entry-tags {
    width: 100%;
    justify-content: flex-start;
    margin-top: var(--space-xs);
  }

  .newsletter-input-group {
    flex-direction: column;
  }

  .newsletter-input {
    width: 100%;
  }

  .newsletter-button {
    width: 100%;
  }

  .footer-content {
    flex-direction: column;
    align-items: flex-start;
    gap: var(--space-sm);
  }

  .thought-content blockquote {
    font-size: var(--font-size-base);
  }

  .thought-content blockquote::before {
    font-size: 2.5rem;
    left: -0.25rem;
    top: -1.25rem;
  }
}

/* Pagination Styles */
nav.pagination {
  /* Ensures the nav bar itself is centered */
  width: fit-content;
  margin-left: auto;
  margin-right: auto;
  /* Vertical margins for the nav element */
  margin-top: var(--space-lg);
  margin-bottom: var(--space-lg);
  /* display: flex, align-items: center, justify-content: center, gap: var(--space-xs)
     are assumed to be defined globally for .pagination from elements.astro or main.css */
}

.pagination a {
  /* Increased padding for better click targets */
  padding: var(--space-sm) var(--space-md);
  /* text-decoration: none, border-radius: var(--border-radius),
     transition: background-color 0.2s are assumed to be defined globally for .pagination a */
}

/* hover effect for non-active page links */
.pagination a:not(.pagination-active):hover {
  background-color: var(--color-border);
  /* color: var(--color-accent2); /* Optional: uncomment if you want text color to change on hover */
}

/* Add other styles from index.less below if any */
</style>