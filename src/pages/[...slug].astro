---
export const prerender = true;
import { getCollection, getEntry, type CollectionEntry } from 'astro:content';
import LogEntryLayout from '../layouts/LogEntryLayout.astro';

export async function getStaticPaths() {
  const logEntries = await getCollection('log', ({ data }) => {
    return data.draft !== true; // Filter out drafts
  });

  // Generate paths for both HTML and Markdown versions
  const paths = [];
  
  // Add regular HTML paths
  logEntries.forEach((entry: CollectionEntry<'log'>) => {
    paths.push({
      params: { slug: entry.slug },
      props: { entry },
    });
  });
  
  // Add Markdown paths that redirect to API
  logEntries.forEach((entry: CollectionEntry<'log'>) => {
    paths.push({
      params: { slug: `${entry.slug}.md` },
      props: { entry, isMarkdownRequest: true },
    });
  });
  
  return paths;
}

const { slug } = Astro.params;
const { isMarkdownRequest } = Astro.props;

// Handle markdown requests by redirecting to API
if (isMarkdownRequest && slug) {
  const cleanSlug = slug.replace('.md', '');
  return Astro.redirect(`/api/raw/${cleanSlug}`, 302);
}

let entry: CollectionEntry<'log'> | undefined;
let ContentComponent: any;

if (slug) {
  try {
    entry = await getEntry('log', slug);
  } catch (e) {
    console.error(`Error fetching entry for slug "${slug}":`, e);
    entry = undefined;
  }
}

if (entry) {
  const rendered = await entry.render();
  ContentComponent = rendered.Content;
}
---
{entry && ContentComponent ? (
  <LogEntryLayout frontmatter={entry.data}>
    <ContentComponent />
  </LogEntryLayout>
) : (
  <LogEntryLayout frontmatter={{ title: "Not Found", description: "The requested log entry could not be found." }}>
    <p>Sorry, we couldn't find a log entry for the slug: <strong>{slug}</strong>.</p>
    <p>Please check the URL or navigate back to the <a href="/log">log index</a>.</p>
  </LogEntryLayout>
)}
